
https://blog.kotlin-academy.com/kotlin-generics-variance-modifiers-36b82c7caa39

Types And SubTypes

InVariant - There is no relation between any 2 types generated by the generic class,
no (out or in) parameter.

Co-Variant -  It means that when A is subtype of B and Cup is covariant,
then type Cup<A> is subtype of Cup<B>.


class Cup<out T>
open class B
class A: B()
fun main(args: Array<String>) {
  val b: Cup<B> = Cup<A>() // OK
  val a: Cup<A> = Cup<B>() // Error: Type mismatch

  val anys: Cup<Any> = Cup<Int>() // OK
  val nothings: Cup<Nothing> = Cup<Int>() // Error: Type mismatch
}


ContraVariant - The opposite effect can be achieved using in modifier,
which makes type parameter contravariant. It means that when A is subtype of B
and Cup is contravariant, then type Cup<A> is supertype of Cup<B>.

class Cup<in T>
open class B
class A: B()
fun main(args: Array<String>) {
  val b: Cup<B> = Cup<A>() // Error: Type mismatch
  val a: Cup<A> = Cup<B>() // OK

  val anys: Cup<Any> = Cup<Int>() // Error: Type mismatch
  val nothings: Cup<Nothing> = Cup<Int>() // OK
}

In Java, arrays are covariant.

Kotlin is much safer than Java. Arrays in Kotlin have invariant type parameter.
List interface has covariant type parameter, because it is immutable.
MutableList has invariant type parameter